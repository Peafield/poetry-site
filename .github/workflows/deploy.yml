name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Next.js app
        run: yarn build
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker buil --no-cache \
            --build-arg MONGODB_URI=${MONGODB_URI} \
            --build-arg JWT_SECRET=${JWT_SECRET} \
            --build-arg ADMIN_USERNAME=${ADMIN_USERNAME} \
            --build-arg ADMIN_PASSWORD=${ADMIN_PASSWORD} \
            --build-arg NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL} \
            -t jupitermaybe/poetry-site:latest .

      - name: Push Docker image
        run: docker push jupitermaybe/poetry-site:latest

      - name: SSH to DigitalOcean Droplet and deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          debug: true
          command_timeout: 20m
          envs: |
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          script: |
            # Update packages and install Docker + Docker Compose
            apt-get update
            apt-get install -y ca-certificates curl gnupg
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
            https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo $VERSION_CODENAME) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Ensure we have the code on the Droplet
            if [ ! -d "~/poetry-site" ]; then
              git clone https://github.com/Peafield/poetry-site.git ~/poetry-site
            fi

            cd ~/poetry-site

            # Write environment variables to .env file so docker-compose can use them at runtime
             cat > .env <<EOF
            MONGODB_URI=${MONGODB_URI}
            JWT_SECRET=${JWT_SECRET}
            ADMIN_USERNAME=${ADMIN_USERNAME}
            ADMIN_PASSWORD=${ADMIN_PASSWORD}
            NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
            EOF

            docker compose pull
            docker compose up -d
